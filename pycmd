#!/bin/bash python3
import sys
import os
import shutil
from subprocess import call as subprocess_call

ROOT_PATH = os.path.dirname(os.path.abspath(__file__))
IS_ROOT = os.getenv('root') is not None
ARGS = sys.argv[1:]
ENV_DOCKER = "config/.docker"
PROJECT = os.path.basename(ROOT_PATH).lower()

APP = ARGS[0] if len(ARGS) > 0 else None
COMMAND = ARGS[1] if len(ARGS) > 1 else None
ARGS = ARGS[2:]

os.chdir(ROOT_PATH)

def call(*args, env=None):
    cmd = " ".join(map(lambda s : f'"{s}"' if " " in s else s, map(str, args)))
    environ = os.environ.copy()
    if env:
        environ.update(env)
    subprocess_call(cmd, shell=True, env=environ)

def docker_compose(*args, env=None):
    call("docker", "compose", "--env-file", ENV_DOCKER, "-p", PROJECT, *args, env=env)

def getuid():
    return 0 if IS_ROOT else os.getuid()

if APP not in ["yarn", "app", "node", "docker", "init"]:
    with open('_documents/help_content.md', 'r', encoding="utf-8") as f:
        print(f.read())

if APP == "init":
    if not os.path.exists("config/.docker"):
        print("Docker environment file (config/.docker) not found. Generating...\n")
        shutil.copy("config/_docker", "config/.docker")
        print("'config/.docker' is added to your project. You may want to update this file manually.\n\n")

    if not os.path.exists("config/.django"):
        print("Django environment file (config/.django) not found. Generating...\n")
        shutil.copy("config/_django", "config/.django")
        print("'config/.django' is added to your project. You may want to update this file manually.\n\n")

    DJANGO_CONFIG_MODULE = os.getenv('DJANGO_CONFIG_MODULE', 'config.local') or 'config.local'
    CONFIG_FILE = f"backend/{DJANGO_CONFIG_MODULE.replace('.', '/')}.py"

    if not os.path.exists(CONFIG_FILE):
        print(f"Django configuration file (${CONFIG_FILE}) not found. Generating...\n")
        shutil.copy("backend/config/config.py.template", CONFIG_FILE)
        print("'config/.django' is added to your project. You may want to update this file manually.\n\n")

if APP == "app":
    if COMMAND in ["serve", "migrate", "makemigrations", "start", "stop", "restart", "status"]:
        if COMMAND in ["serve", "migrate", "makemigrations", "start", "stop", "restart", "status"]:
            IS_ROOT = True
        docker_compose("exec", "--user", getuid(), "app", "cmd", *ARGS)
    elif COMMAND in ["install"]:
        docker_compose("exec", "--user", os.getuid(), "app", "bash", "pip-install", *ARGS)
    else:
        docker_compose("exec", "--user", getuid(), "app", COMMAND, *ARGS)

if APP == "docker":
    if COMMAND == "up":
        if len(ARGS) == 0:
            ARGS.append('-d')
        ARGS.remove("--fg")

    if COMMAND == "logs":
        if len(ARGS) == 0:
            ARGS.append('app')
        ARGS.remove("-f")
        ARGS.insert(0, '-f')

    if COMMAND == "build":
        docker_compose(COMMAND, env={"USER_ID" : str(os.getuid())})
    elif COMMAND == "exec":
        docker_compose(COMMAND, "--user", getuid(), *ARGS)
    else:
        docker_compose(COMMAND, *ARGS)

if APP == "node":
    os.makedirs("dist", exist_ok=True)
    docker_compose("exec", "--user", getuid(), "app", COMMAND, *ARGS)

if APP == "yarn":
    os.makedirs("dist", exist_ok=True)
    docker_compose("exec", "--user", os.getuid(), "app", COMMAND, *ARGS)
